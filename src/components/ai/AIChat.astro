---
// AI Chat Component
---

<div id="ai-chat" class="fixed bottom-6 right-6 z-50">
  <!-- Chat Toggle Button -->
  <button
    id="chat-toggle"
    class="bg-green hover:bg-black hover:text-white text-black rounded-full p-4 shadow-lg transition-all duration-300 hover:scale-110"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
    </svg>
  </button>

  <!-- Chat Window -->
  <div
    id="chat-window"
    class="hidden absolute bottom-16 right-0 w-80 h-96 bg-white rounded-xl shadow-2xl border border-gray-200 flex flex-col overflow-hidden"
  >
    <!-- Chat Header -->
    <div class="bg-gradient-to-r from-green to-yellow-400 p-4 text-black">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <div class="w-3 h-3 bg-black rounded-full animate-pulse"></div>
          <h3 class="font-medium">AI Marketing Assistant</h3>
        </div>
        <button id="chat-close" class="hover:bg-black hover:text-white rounded p-1 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4">
      <div class="ai-message">
        <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm">ðŸ‘‹ Hi! I'm your AI marketing assistant. How can I help you grow your business today?</p>
        </div>
      </div>
    </div>

    <!-- Chat Input -->
    <div class="p-4 border-t border-gray-200">
      <div class="flex space-x-2">
        <input
          id="chat-input"
          type="text"
          placeholder="Ask about marketing strategies..."
          class="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-green"
        />
        <button
          id="chat-send"
          class="bg-green hover:bg-black hover:text-white text-black px-4 py-2 rounded-lg transition-colors"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { geminiAI } from '../../lib/gemini.ts';

  const chatToggle = document.getElementById('chat-toggle');
  const chatWindow = document.getElementById('chat-window');
  const chatClose = document.getElementById('chat-close');
  const chatMessages = document.getElementById('chat-messages');
  const chatInput = document.getElementById('chat-input') as HTMLInputElement;
  const chatSend = document.getElementById('chat-send');

  let isOpen = false;

  function toggleChat() {
    isOpen = !isOpen;
    if (isOpen) {
      chatWindow?.classList.remove('hidden');
      chatWindow?.classList.add('animate-fade-in-up');
    } else {
      chatWindow?.classList.add('hidden');
      chatWindow?.classList.remove('animate-fade-in-up');
    }
  }

  function addMessage(message: string, isUser: boolean = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = isUser ? 'user-message flex justify-end' : 'ai-message';
    
    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = isUser 
      ? 'bg-green text-black rounded-lg p-3 max-w-xs'
      : 'bg-gray-100 rounded-lg p-3 max-w-xs';
    
    const paragraph = document.createElement('p');
    paragraph.className = 'text-sm';
    paragraph.textContent = message;
    
    bubbleDiv.appendChild(paragraph);
    messageDiv.appendChild(bubbleDiv);
    chatMessages?.appendChild(messageDiv);
    
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);
  }

  async function sendMessage() {
    const message = chatInput?.value.trim();
    if (!message) return;

    addMessage(message, true);
    chatInput!.value = '';

    // Show typing indicator
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'ai-message';
    typingDiv.innerHTML = `
      <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
        <div class="flex space-x-1">
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
        </div>
      </div>
    `;
    chatMessages?.appendChild(typingDiv);
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);

    try {
      const response = await geminiAI.analyzeUserInput(message);
      document.getElementById('typing-indicator')?.remove();
      addMessage(response);
    } catch (error) {
      document.getElementById('typing-indicator')?.remove();
      addMessage('Sorry, I\'m having trouble connecting right now. Please try again!');
    }
  }

  chatToggle?.addEventListener('click', toggleChat);
  chatClose?.addEventListener('click', toggleChat);
  chatSend?.addEventListener('click', sendMessage);
  
  chatInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
</script>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in-up {
    animation: fade-in-up 0.3s ease-out;
  }
</style>